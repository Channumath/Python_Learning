
Print the first 5 positive integers in ascneding order with one number in each line
for i in range(1,6):
    print(i)
1
2
3
4
5
Print the following pattern
for i in range(1,6):
    print("*"*i)
*
**
***
****
*****
Accept an integer as input and print its square as output.
a = int(input("enter an integer: "))

def return_sq(a):
    return a*a

return_sq(a)
enter an integer: 2
4
Accept two integers as input and print their sum as output.
a = int(input("enter an integer: "))
b = int(input("enter an integer: "))

def get_sum(a,b):
    return a+b

get_sum(a,b)
enter an integer: 8
enter an integer: 10
18
Accept two words as input and print the two words after adding a space between them
a = input("enter a word: ")
b = input("enter a word: ")

def word_concat(a,b):
    return a+ " " +b

word_concat(a,b)
enter a word: Anjali
enter a word: Kumari
'Anjali Kumari'
Accept the registration number of a vehicle as input and print its state-code as output
l = input("enter registration number: ")

def get_reg(l):
    return l[:2]

get_reg(l)
enter registration number: KA042345
'KA'
Accept a five-digit number as input and print the sum of its digits as output
a = list(input("enter 5 digit number: "))

def get_sum(a):
    sum = 0
    for i in a:
        sum = sum + int(i)
    return sum
get_sum(a)
enter 5 digit number: 76435
25
Accept five words as input and print the sentence formed by these words after adding a space between consecutive words and a full stop at the end
def get_sentence():
    l = []
    for i in range(5):
        w = input("enter a word: ")
        l.append(w)
    s = " ".join(l)
    s = s + "."
    return s

get_sentence()
enter a word: Anjali
enter a word: is
enter a word: a
enter a word: good
enter a word: girl
'Anjali is a good girl.'
Accept the date in DD-MM-YYYY format as input and print the year as output
d = input("enter a date in dd-mm-yyyy format: ")

def get_year():
    return d[-4:]

get_year()
enter a date in dd-mm-yyyy format: 21-03-2023
'2023'
Accept a sequence of five single digit numbers separated by commas as input. Print the product of all five numbers
def get_digits():
    global l 
    l = []
    for i in range(5):
        x = int(input("Enter a single digit number: "))
        l.append(x)
    return l

def get_prod():
    mul = 1
    for i in l:
        mul = mul * i
    return mul
get_digits()
get_prod()
Enter a single digit number: 1
Enter a single digit number: 2
Enter a single digit number: 3
Enter a single digit number: 4
Enter a single digit number: 5
120
Accept two positive integers x and y as input. Print the number of digits in x raised to power of y
x = int(input("Enter a positive integer: "))
y = int(input("Enter a positive integer: "))

def get_count():
    z = x**y
    return len(str(z))

get_count()
Enter a positive integer: 6
Enter a positive integer: 6
5
Accept a string as input.
If the input string is of odd length, then continue with it.
If the input string is of even length, make the string of odd length as below:
If the last character is a period (.), then remove it
If the last character is not a period, then add a period (.) to the end of the string

Call this string of odd length word. Select a substring made up of three consecutive characters from word such that there are an equal number of characters to the left and right of this substring

Print this substring as output. You can assume that all input strings will be in lower case and will have a length of at least four.

def get_s():
    s = input("Enter a string value: ")
    if len(s)%2 == 0:
        if s[-1] == ".":
            s.replace(".","")
        else:
            s = s + "."
    n = int((len(s) - 1)/2)
    return s[n-1:n+2]
get_s()
Enter a string value: welcome
'lco'
Accept three positive integers as input and check if they form the sides of a right triangle.
Print YES if they form one, and NO is they do not. The input will have three lines, with one integer on each line.
The output should be a single line containing one of these two strings: YES or NO.
a = int(input("Enter an integer: "))
b = int(input("Enter an integer: "))
c = int(input("Enter an integer: "))

def is_tri():
    if ((a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2)):
        print("yes")
    else:
        print("no")

is_tri() 
Enter an integer: 3
Enter an integer: 4
Enter an integer: 5
yes
EvenOdd is a tech startup. Each employee at the startup is given an employee id which is a unique positive integer. On one warm Sunday evening, five employees of the company come together for a meeting and sit at a circular table:
The employees follow a strange convention. They will continue the meeting only if the following condition is satisfied:

The sum of the employee-ids of every pair of adjacent employees at the table must be an even number
They are so lazy that they won’t move around to satisfy the above condition, If the current seating plan doesn’t satisfy the condition, the meeting will be cancelled.
You are given the employee-id of all five employees. Your task is to decide if the meeting happened or not.

The input will be five lined, each containing an integer. The ith line will have the employee-id of Ei. The output will be a single line containing one of these two strings: YES or NO

a = int(input("Enter your emp id: "))
b = int(input("Enter your emp id: "))
c = int(input("Enter your emp id: "))
d = int(input("Enter your emp id: "))
e = int(input("Enter your emp id: "))

def meeting_info():
    if ((a+b)%2 == 0) and ((b+c)%2 == 0) and ((c+d)%2 == 0) and ((d+e)%2 == 0) and ((e+a)%2 == 0):
        print("Yes")
    else:
        print("No")
        
meeting_info()
Enter your emp id: 1
Enter your emp id: 3
Enter your emp id: 5
Enter your emp id: 7
Enter your emp id: 9
Yes
Accept a string as input and print the vowels present in the string in alphabetical order.
If the string doesn’t contain any vowels, then print the string none as output. Each vowel that appears in the input string – irrespective of its case should appear just once in lower case in the output

s = input("Enter a string: ").lower()
lst = list(s)
v = ['a','e','i','o','u']

res = []
for i in lst:
    if i in v:
        res.append(i)
#     else:
#         print('None')
print(set(res))
Enter a string: welcome
{'o', 'e'}
You are given the date of birth of two persons, not necessarily from the same family. Your task is to find the younger of the two.
If both of them share the same date of birth, then the younger of the two is assumed to be that person whose name comes first in alphabetical order.
The input will have four lines. The first two lines correspond to the first person, while the last two lines correspond to the second person.
For each person, the first line corresponds to the name and the second line corresponds to the date of birth in “DD-MM-YYYY” format.
Your output should be the name of the younger of the two.

n1 = input("Enter your name: ")
d1 = input("Enter your date of birth: ")

n2 = input("Enter your name: ")
d2 = input("Enter your date of birth: ")

def get_younger():
    if d1 == d2:
        if n1 > n2:
            print(f"{n2} is younger")
        else:
            print(f"{n1} is younger")

    elif d1[-4:] != d2[-4:]:
        if int(d1[-4:]) < int(d2[-4:]):
            print(f"{n2} is younger")
        else:
            print(f"{n1} is younger")
    
    elif d1[3:5] != d2[3:5]:
        if int(d1[3:5]) < int(d2[3:5]):
            print(f"{n2} is younger")
        else:
            print(f"{n1} is younger")
            
    else:
        if int(d1[:2]) < int(d2[:2]):
            print(f"{n2} is younger")
        else:
            print(f"{n1} is younger")
        
get_younger()
Enter your name: Mona
Enter your date of birth: 20-01-1996
Enter your name: Anjali
Enter your date of birth: 27-02-1997
Anjali is younger
Accept a string as input. Your task is to determine if the input string is a valid password or not.
For a string to be a valid password, it must satisfy all the conditions given below:
(1) It should have at least 8 and at most 32 characters
(2) It should start with an uppercase or lowercase letter
(3) It should not have any of these characters: / \ = ' "
(4) It should not have spaces

It could have any character that is not mentioned in the list of characters to be avoided (points 3 and 4).
Output True if the string forms a valid password and False otherwise

# Note: you can write all if conditions in just 1 if statement. I wrote in multiple if, to make it more readable!!
s = input("Enter a string value: ")

def pass_valid():
    if (len(s) >=8 and len(s) <=32):
        if s[0].isalpha():
            if '/' not in s and '\\' not in s and '=' not in s and '\"' not in s and ' ' not in s:
                print("Valid password")
            else:
                print("Invalid password")
        else:
            print("Invalid password")
    else:
        print("Invalid password")
        
pass_valid()
Enter a string value: hellowhkkd
Valid password
Accept a positive integer n as input and print the first n positive integers, one number on each line.
n = int(input("Enter a positive integer: "))

def get_int():
    for i in range(1, n+1):
        print(i)
get_int()
Enter a positive integer: 5
1
2
3
4
5
Accept a positive integer n as input, where n is greater than 1. Print PRIME if n is a prime number and NOT PRIME otherwise.
n = int(input("Enter a positive integer: "))

def find_prime():
    isprime = True
    if n == 1:
        isprime = False
    else:
        for i in range(2,n):
            if n%i == 0:
                isprime == False
    if isprime == True:
        print(f"{n} is a prime number")
    else:
        print(f"{n} is not a prime number")

find_prime()
Enter a positive integer: 7
7 is a prime number
Accept two strings as input and form a new string by removing all characters from the second string which are present in the first string.
Print this new string as output. You can assume that all input strings will be in lower case.

a = input("Enter a string value: ")
b = input("Enter a string value: ")

def str_rep(a,b):
    for i in a:
        if i in b:
            b = b.replace(i,'')
    return b

str_rep(a,b)
Enter a string value: welcome
Enter a string value: hotel
'ht'
Accept a phone number as input. A valid phone number should satisfy the following constraints.
(1) The number should start with one of these digits: 6, 7, 8, 9
(2) The number should be exactly 10 digits long.
(3) No digit should appear more than 7 times in the number.
(4) No digit should appear more than 5 times in a row in the number.

If the fourth condition is not very clear, then consider this example: the number 9888888765 is invalid because the digit 8 appears more than 5 times in a row.

Print the string valid if the phone number is valid. If not, print the string invalid.

n = input("Enter your phone number: ")
a = False

def valid_num():
    if int(n[0])>5 and len(n)==10 and n.isdigit():
        for i in range(10):
            if n.count(n[i])<8:
                a=True
                if n[i]*6 in n:
                    a = False
                    break
            else:
                break

    if a:
        print("Valid phone number")
    else:
        print("Invalid phone number")
        
valid_num()
Enter your phone number: 6271927839
Valid phone number
In the first line of input, accept a sequence of space-separated words. In the second line of input, accept a single word.
If this word is not present in the sequence, print NO. If this word is present in the sequence, then print YES and in the next line of the output, print the number of times the word appears in the sequence.

s = input().split(' ')
a = input()

def get_occ():
    if a in s:
        print("yes")
        print(s.count(a))
    else:
        print("no")
        
get_occ()
I do know this does sound weird but do you know why
do
yes
2
Write a function named factorial that accepts an integer n as argument.
It should return the factorial of n if n is a positive integer. It should return -1 if n is a negative integer, and it should return 1 if n is zero.

def facto(n):
    if n<0:
        return -1
    elif n==0:
        return 1
    else:
        f = 1
        for i in range(1, n+1):   
             f*=i
        return f
    
facto(5)  
Enter an integer: 5
120
The range of a list of numbers is the difference between the maximum and minimum values in the list, write a function named get_range that accepts a non-empty list of real numbers as argument.
It should return the range of the list.

(1) Avoid using built-in function such as max and min.
(2) You do not have to accept input from the user or print output to the console. You just have to write the function definition.

def get_max(l):
    maxi = l[0]
    for x in l:
        if x > maxi:
            maxi = x
    return maxi

def get_min(l):
    mini = l[0]
    for x in l:
        if x < mini:
            mini = x
    return mini

def get_range(l):
    maxi = get_max(l)
    mini = get_min(l)
    r = maxi - mini
    return r

get_range([1,6,4,3,8,3])
7
Write a function named read_file that accepts a text file named filename as argument. Within the function, read the file and print each line of the file on a separate line in the console.
You shouldn't print any extra characters at the end of a line. There shouldn't be an empty line between any two consecutive lines.

(1) filename is a string variable that holds the name of the file. For example, in the first test case, it is filename = 'public_1.txt'.
(2) You do not have to accept input from the console. You have to write the function definition and print the contents of the file within the function

def read_file(file: str):
    with open(file, 'r') as f:
        lines = f.read()
        print(lines)
A simple algorithm has to be designed to find out whether a student belongs to the Data Science branch or not.
The input will be a student's roll number, which is of the form BR18B0000. Here, BR represents the branch code, 18 represents the year of joining, B represents the education level and 0000 represents the specific identification given to the student of that batch.

The branch code for Data Science is DS.

Print True if the student belongs to Data Science branch and False otherwise.

def get_branch(x: str):
    '''This code will tell us whether a student belongs to DS branch or not, given his/her roll no'''
    if x[:2] == 'DS':
        print("True")
    else:
        print("False")
        
get_branch('DS810000')
True
The police are trying to track a criminal based on the evidence available at a crime site. Their main clue is a vehicle's damaged number plate.
Only the string TN07 is visible. The format of the registration number is AA00AA00, where the first two letters are alphabets, next two are numbers, next two are again alphabets followed by two numbers at the end.

A number plate is picked from a database of registration numbers and is given to you as input. Your task is to determine if this could belong to the criminal or not.

Print True if the number plate contains TN07 and False otherwise.

def get_reg(n):
    if n[:4] == 'TN07' or n[-4:] == 'TN07':
        print("True")
    else:
        print("False")
    
get_reg('AA07TN07')
True
You are given a string and two non-negative integers as input. The two integers specify the start and end indices of a substring in the given string. Create a new string by replicating the substring a minimum number of times so that the resulting string is longer than the input string.
The input parameters are the string, start index of the substring and the end index of substring (endpoints inclusive) each on a different line.

s = input()
a = int(input())
b = int(input())

x = s[a:b+1]
e = ""
while len(s) >= len(e):
    e += x
print(e)
welcome
2
5
lcomlcom
A class teacher has decided to split her entire class into four groups, namely Sapphire, Peridot, Ruby, and Emerald for sports competitions. For dividing the students into these four groups, she has followed the pattern given below:
Sapphire - 1, 5, 9, 13, 17, 21, ...

Peridot - 2, 6, 10, 14, 18, 22, ...

Ruby - 3, 7, 11, 15, 19, 23, ...

Emerald - 4, 8, 12, 16, 20, 24, ...

All the students are represented by their roll numbers. Based on the above pattern, given the roll number as input, print the group the student belongs to.

Note that the roll number can be any positive integer and not necessarily less than 25.

n = int(input("Enter your roll no: "))

for i in range(1,n+1,4):
    if n==i:
        print('Sapphire')
for j in range(2,n+1,4):
    if n==j:
        print('Peridot')
for k in range(3,n+1,4):
    if k==n:
        print('Ruby')
for l in range(4,n+1,4):
    if l==n:
        print('Emerald')
Enter your roll no: 34
Peridot
A data science company wants to hire data scientists from abc college. The company follows a certain criteria for selection:
for a student to be selected, the number of backlogs should be at most 5 and the CGPA (Cumulative Grade Point Average) should be greater than 6.
If the student does not fit the above criteria, then the student is not offered the job.

If the student is selected, then the salary offered is equal to 5 times his/her CGPA (in lakhs).

Accept the number of backlogs (integer) and the CGPA (float) of the student as input. Your task is to determine if the student is selected or not.

If the student is selected, then print the package. If not, then print the string Not Selected.

b = int(input("Enter no. of backlogs: "))
c = float(input("Enter your CGPA: "))

if b<=5 and c>6:
    print("Selected")
    salary = 5*c*100000
    print(f"Salary is {salary}")
else:
    print("Not selected")
Enter no. of backlogs: 4
Enter your CGPA: 6.4
Selected
Salary is 3200000.0
Accept a string as input and print PALINDROME if it is a palindrome, and NOT PALINDROME otherwise
s = input("Enter a string value: ")

if s == s[::-1]:
    print("Palindrome")
else:
    print("Not a palindrome")
Enter a string value: hello
Not a palindrome
In a portal login website, you are asked to write a function get_password_strength to decide the strength of a password. The strength is decided based on the total score of the password, Use following conditions:
If password has length greater than 7 then score increases by one point.

If password has at least one upper case and one lower case alphabets score increases by one point.

If password has at least one number and no consecutive numbers like 12 or 234 then score increases by one point.

If password has at least one special character (any character other than numbers and alphabets) then score increases by one point.

If password contains username, then it is invalid password.

If the password has score of four points, three points, two points, or one point then print Very Strong, Strong, Moderate, or Weak respectively. If the password is invalid, then print PASSWORD SHOULD NOT CONTAIN USERNAME and If the score is zero, then print 'Use a different password'.

The arguments to the function are username and password which are already defined.

def get_password_strength(username,password):
    score = 0
    capital = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    c_flag=False
    small = 'abcdefghijklmnopqrstuvwxyz'
    s_flag=False
    n = '0123456789'
    n_flag=False
    nc_flag=True
    
    if username in password:
        return "PASSWORD SHOULD NOT CONTAIN USERNAME"
    if len(password) > 7:
        score += 1
    for i in range(len(password)):
        if password[i] in small:
            s_flag=True
        elif password[i] in capital:
            c_flag=True
        elif password[i] in n:
            n_flag=True
        if n_flag:
            if i!=len(password)-1:
                if n[((n.index(password[i]))+1)]==password[i+1]:
                    nc_flag=False
    if c_flag and s_flag:
                    score += 1
    if n_flag and nc_flag:
                    score += 1
    if not password.isalnum():
                    score += 1
    if score==4:
                    return "very strong"
    if score==3:
                    return "strong"
    if score==2:
                    return "moderate"
    if score==1:
                    return "weak"
    if score==0:
                    return "use a different password"

get_password_strength('anjali','r@123T')      
'moderate'
Decorator that logs the date and time
from datetime import datetime 

def log_datetime(func):
    
    def wrapper():
        print(f'function: {func.__name__} \nRun on {datetime.today().strftime("%Y-%m-%d %H:%M:%S")}')
        print(f'{"-"*30}')
        func()
    return wrapper
    
@log_datetime
def daily_backup():
    print("Daily backup has finished")
daily_backup()
function: daily_backup 
Run on 2023-05-25 09:55:02
------------------------------
Daily backup has finished
Do this with help of decorator:
input: "Hello world"
output: ["hello", "world"]

# decorator function to convert to lower case
def lowercase_dec(function):
    def wrapper():
        func = function()
        string_lowercase = func.lower()
        return string_lowercase
    return wrapper

# decorator function to split words
def splitter_dec(function):
    def wrapper():
        func = function()
        string_split = func.split()
        return string_split
    return wrapper

@splitter_dec
@lowercase_dec
def hello():
    return "HEllo world"
hello()
['hello', 'world']
Program to get data Items from a list appearing odd number of times
def odd_occ(l):
    l1 = []
    for i in l:
        if l.count(i)%2 != 0:
            l1.append(i)
    return l1

odd_occ([2,3,4,7,8,1,9,3,4,8,5,2,7])
[1, 9, 5]
Remove items from a list while iterating but without creating a different copy of a list. Remove numbers greater than 50.
number_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

Expected Output: [10, 20, 30, 40, 50]

l = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
l = [i for i in l if i <= 50]
print(l)
[10, 20, 30, 40, 50]
Display all duplicate items from a list.
sample_list = [10, 20, 60, 30, 20, 40, 30, 60, 70, 80]

Expected Output: [20, 60, 30]

# Method - 1
l = [10, 20, 60, 30, 20, 40, 30, 60, 70, 80]

l1 = []
for i in l:
    if l.count(i) >1:
        l1.append(i)
print(list(set(l1)))
[20, 60, 30]
# Method - 2
import collections

l = [10, 20, 60, 30, 20, 40, 30, 60, 70, 80]

duplicates = []

for item, count in collections.Counter(l).items():
    if count > 1:
        duplicates.append(item)
print(duplicates)
[20, 60, 30]
Create an outer function that will accept two strings, x and y. (x= 'Emma' and y = 'Kelly'. Create an inner function inside an outer function that will concatenate x and y.
At last, an outer function will join the word 'developer' to it.

def manipulate(x,y):
    def inner_func(x,y):
        return x + y
    z = inner_func(x,y)
    return z + 'Developer'

manipulate('abc','xyz')
'abcxyzDeveloper'
Modify the element of a nested list inside the following list. Change the element 35 to 3500.
list1 = [5, [10, 15, [20, 25, [30, 35], 40], 45], 50]

list1 = [5,[10,15,[20,25,[30,35],40],45],50]

list1[1][2][2][1] = 3500
print(list1)
[5, [10, 15, [20, 25, [30, 3500], 40], 45], 50]
Access the nested key increment from the following dictionary
Access 12 emp_dict = { "company": { "employee": { "name": "Jess", "payable": { "salary": 9000, "increment": 12 } } } }

emp_dict = {
    "company": {
        "employee": {
            "name": "Jess",
            "payable": {
                "salary": 9000,
                "increment": 12
            }
        }
    }
}

emp_dict["company"]["employee"]["payable"]["increment"]
12
Print the sum of the current number and the previous number.
Write a program to iterate the first 10 numbers and in each iteration, print the sum of the current and previous number.

Printing current and previous number sum in a range(10)

Current Number 0 Previous Number 0 Sum: 0
Current Number 1 Previous Number 0 Sum: 1
Current Number 2 Previous Number 1 Sum: 3
Current Number 3 Previous Number 2 Sum: 5
Current Number 4 Previous Number 3 Sum: 7
Current Number 5 Previous Number 4 Sum: 9
Current Number 6 Previous Number 5 Sum: 11
Current Number 7 Previous Number 6 Sum: 13
Current Number 8 Previous Number 7 Sum: 15
Current Number 9 Previous Number 8 Sum: 17

def get_sum():
    for i in range(10):
        if i == 0:
            print(f"Current Number: {i} Previous Number {i} Sum: {i+i}")
        else:
             print(f"Current Number: {i} Previous Number {i-1} Sum: {i+i-1}")
                
get_sum()
Current Number: 0 Previous Number 0 Sum: 0
Current Number: 1 Previous Number 0 Sum: 1
Current Number: 2 Previous Number 1 Sum: 3
Current Number: 3 Previous Number 2 Sum: 5
Current Number: 4 Previous Number 3 Sum: 7
Current Number: 5 Previous Number 4 Sum: 9
Current Number: 6 Previous Number 5 Sum: 11
Current Number: 7 Previous Number 6 Sum: 13
Current Number: 8 Previous Number 7 Sum: 15
Current Number: 9 Previous Number 8 Sum: 17
Print characters from a string that are present at an even index number.
Write a program to accept a string from the user and display characters that are present at an even index number.

For example, str = "ineuron" so you should display ‘i’, ‘e’, ‘r’, ‘n’.

s = input()

def get_eve(s):
    l = []
    for i in range(len(s)):
        if i % 2 == 0:
            l.append(s[i])
    return l

get_eve(s)
anjali
['a', 'j', 'l']
Print multiplication table form 1 to 10
1 2 3 4 5 6 7 8 9 10

2 4 6 8 10 12 14 16 18 20

3 6 9 12 15 18 21 24 27 30

4 8 12 16 20 24 28 32 36 40

5 10 15 20 25 30 35 40 45 50

6 12 18 24 30 36 42 48 54 60

7 14 21 28 35 42 49 56 63 70

8 16 24 32 40 48 56 64 72 80

9 18 27 36 45 54 63 72 81 90

10 20 30 40 50 60 70 80 90 100

def get_prod():
    for i in range(1,11):
        for j in range(1,11):
            c = i*j
            print(f"{c} ",end=" ")
        print("\n")

get_prod()
1  2  3  4  5  6  7  8  9  10  

2  4  6  8  10  12  14  16  18  20  

3  6  9  12  15  18  21  24  27  30  

4  8  12  16  20  24  28  32  36  40  

5  10  15  20  25  30  35  40  45  50  

6  12  18  24  30  36  42  48  54  60  

7  14  21  28  35  42  49  56  63  70  

8  16  24  32  40  48  56  64  72  80  

9  18  27  36  45  54  63  72  81  90  

10  20  30  40  50  60  70  80  90  100  

Remove duplicates from a list and create a tuple and find the minimum and maximum number.
sample_list = [87, 45, 41, 65, 94, 41, 99, 94]

Expected Outcome:
unique items [87, 45, 65, 99]
tuple (87, 45, 65, 99)
min: 45
max: 99

def get_uniq(function):
    def wrapper():
        l1 = []
        func = function()
        for i in func:
            if func.count(i) < 2:
                l1.append(i)
        return l1
    return wrapper

def get_tup(function):
    def wrapper():
        func = function()
        return tuple(func)
    return wrapper

# def get_min(function):
#     def wrapper():
#         func = function()
#         mini = min(func)
#         return mini
#     return wrapper

def get_max(function):
    def wrapper():
        func = function()
        maxim = max(func)
        return maxim
    return wrapper

@get_max
# @get_min
@get_tup
@get_uniq
def get_list():
    return [87, 45, 41, 65, 94, 41, 99, 94]
    
get_list()
99
Write a Python program to create a lambda function that adds 15 to a given number passed in as an argument, also create a lambda function that multiplies argument x with argument y and print the result.
c = lambda a: a+15
d = lambda x,y: x*y
print(c(10))
print(d(2,3))
25
6
Write a Python program to sort a list of tuples using Lambda.
s = lambda x: sorted(x)
s([(2,9,3),(2,5),(7,4)])
[(2, 5), (2, 9, 3), (7, 4)]
Write a python program to extract year, month, date and time using Lambda.
import datetime
now = datetime.datetime.now()
print(now)

year = lambda i: i.year
month = lambda i: i.month
day = lambda i: i.day
time = lambda i: i.time()

print(year(now))
print(month(now))
print(day(now))
print(time(now))
2023-05-27 12:27:40.886465
2023
5
27
12:27:40.886465
Write a python program to count the even, odd numbers in a given array of integers using Lambda.
l = [1,2,3,4,5,6,7,8,9]

even = len(list(filter(lambda x : x%2 == 0, l)))
odd = len(list(filter(lambda x : x%2 != 0, l)))

print(f"Total even no.'s: {even}")
print(f"Total odd no.'s: {odd}")
Total even no.'s: 4
Total odd no.'s: 5
Write a Python program to convert all the characters in uppercase and lowercase.
Use map() function.

chars = ['A', 'b', 'Y', 'c']

def get_upper(s):
    return str(s).upper(), str(s).lower()

print(list(map(get_upper,chars)))
[('A', 'a'), ('B', 'b'), ('Y', 'y'), ('C', 'c')]
Write a python program to square the elements of a list using map() function.
l = [1,2,3,4,5]

def get_sq(x):
    return x*x

print(list(map(get_sq,l)))
[1, 4, 9, 16, 25]
